For all parts the given data was in the correct format

PART 1
Question 1:
-----------
8/8 after running 200 epochs
100% accuracy

Question 2:
-----------
Based on the given dataset I am getting perfect accuracy so there is no
room for improvement.



PART 2:
Question 1:
-----------
Input Nodes - 13
Output Nodes - 3
Hidden Nodes - 100

Each input node represents a different feature of the wine and these 13
values are what we compute to get the the class. The output nodes represent
the 3 different classes that a wine can be. Finally the number of hidden
nodes is a value that I came to the conclusion on after extensive testing
to find the most effective value at outputting the highest accuracy.

Question 2:
-----------
Learning Rate - 0.001
Momentum - 0.9
Initial Weight Ranges - Created by scikit-learn based on the features and output
                        values

After testing multiple options these values proved to output the most accurate
results.

Question 3:
-----------
Training Termination Criteria - when the loss of score is not improving by at least
1e-4 for 10 consecutive iterations or if 1000 iterations are run

After testing multiple options these criteria proved to output the most accurate
results without over training.

Question 4:
-----------
(0.99 + 0.97 + 0.98 + 0.98 + 0.97 + 0.96 + 0.97 + 0.97 + 0.98 + 0.96) / 10

= 0.973 = 97.3% Accuracy Rate

After analysis of multiple variations in parameters I believe that this is
the highest mean value available with the given data sets and methods.

Question 5:
-----------
With my k nearest neighbor implementation (with a k value of 3) I was able
to achieve an accuracy of 95.5%. Although the distinction between these two
methods from a performance standpoint isn't enormous, the roughly 2% increase
using a perceptron method does give a noticeable improvement.



PART 3:
Question 1:
-----------

Question 2:
-----------

Question 3:
-----------


Question 4:
-----------

Question 5:
-----------

Question 6:
-----------
add(mul(X0, X0), div(sub(X0, -0.999), 0.249)) :: 23.1937
add(mul(X0, X0), div(add(div(X0, X0), X0), 0.251)) :: 12.4888

Question 7:
-----------


PART 4:
Question 1:
-----------

Question 2:
-----------

Question 3:
-----------

Question 4:
-----------

Question 5:
-----------

Question 6:
-----------

Question 7:
-----------

Question 7:
-----------
